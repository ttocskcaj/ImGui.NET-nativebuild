name: CI

# Controls when the workflow will run
on:
  create:

  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]

  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      ReleaseType:
        description: 'Release or Debug'
        required: true
        default: 'Release'

jobs:
  Build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
          - os: ubuntu-latest
          - os: windows-latest
            architecture: x64
          - os: windows-latest
            architecture: x86
          - os: windows-latest
            architecture: ARM64
          - os: windows-latest
            architecture: ARM

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup .NET
        if: matrix.os == 'windows-latest'
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x

      - name: Build source package
        if: matrix.os == 'windows-latest' && matrix.architecture == 'x64'
        run: dotnet pack -c Release ImGui.NET.SourceBuild.csproj
        shell: bash

      - name: Upload source package
        uses: actions/upload-artifact@v4
        if: matrix.os == 'windows-latest' && matrix.architecture == 'x64'
        with:
          name: SourcePackage
          path: bin\Packages\Release\*.nupkg

      # - name: Publish untagged source package to MyGet
      #   if: matrix.os == 'windows-latest' && github.ref == 'refs/heads/master' && matrix.architecture == 'x64'
      #   run: dotnet nuget push bin\Packages\Release\*.nupkg -s https://www.myget.org/F/mellinoe/api/v3/index.json --api-key ${{secrets.MYGET_KEY}}
      #   # error can be fixed afterwards and job can be re-triggered
      #   continue-on-error: true

      # - name: Publish tagged source package release to nuget.org
      #   if: matrix.os == 'windows-latest' && startsWith(github.ref, 'refs/tags/') && matrix.architecture == 'x64'
      #   run: dotnet nuget push bin\Packages\Release\*.nupkg -s https://api.nuget.org/v3/index.json --api-key ${{secrets.NUGET_KEY}}
      #   # error can be fixed afterwards and job can be re-triggered
      #   continue-on-error: true

      - name: Build ${{ github.event.inputs.ReleaseType || 'Release' }}
        run:  |
              if [ "$RUNNER_OS" == "Windows" ]; then
                ./ci-build.cmd ${{ github.event.inputs.ReleaseType || 'Release' }} ${{ matrix.architecture }}
              else
                ./ci-build.sh ${{ github.event.inputs.ReleaseType || 'Release' }}
              fi
        shell: bash

      - name: Upload win-${{ matrix.architecture }} ${{ github.event.inputs.ReleaseType || 'Release' }}
        uses: actions/upload-artifact@v4
        if: matrix.os == 'windows-latest'
        with:
          name: win-${{ matrix.architecture }}
          path: build\${{ matrix.architecture }}\${{ github.event.inputs.ReleaseType || 'Release' }}\*

      - name: Upload ${{ matrix.os }} ${{ github.event.inputs.ReleaseType || 'Release' }}
        uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        with:
          name: ${{ matrix.os }}-x64
          path: build/${{ github.event.inputs.ReleaseType || 'Release' }}/*

      - name: Prepare JSON Files
        shell: bash
        run: |
          mkdir -p JsonFiles/cimgui JsonFiles/cimplot
          cp cimgui/generator/output/structs_and_enums.json JsonFiles/cimgui/
          cp cimgui/generator/output/definitions.json JsonFiles/cimgui/
          cp cimplot/generator/output/structs_and_enums.json JsonFiles/cimplot/
          cp cimplot/generator/output/definitions.json JsonFiles/cimplot/
        if: matrix.os == 'windows-latest' && matrix.architecture == 'x64'

      - name: Upload JsonFiles
        uses: actions/upload-artifact@v4
        if: matrix.os == 'windows-latest' && matrix.architecture == 'x64'
        with:
          name: JsonFiles
          path: JsonFiles/

  CreateReleaseOnTagCreate:
    runs-on: ubuntu-latest
    needs: [Build]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4

      - name: Prepare Artifacts
        run: |
          mkdir -p cimgui/win-x64 cimplot/win-x64
          mv win-x64/cimgui.dll cimgui/win-x64/cimgui.dll
          mv win-x64/cimplot.dll cimplot/win-x64/cimplot.dll
  
          mkdir -p cimgui/win-x86 cimplot/win-x86
          mv win-x86/cimgui.dll cimgui/win-x86/cimgui.dll
          mv win-x86/cimplot.dll cimplot/win-x86/cimplot.dll
  
          mkdir -p cimgui/win-arm64 cimplot/win-arm64
          mv win-ARM64/cimgui.dll cimgui/win-arm64/cimgui.dll
          mv win-ARM64/cimplot.dll cimplot/win-arm64/cimplot.dll
  
          mkdir -p cimgui/win-arm cimplot/win-arm
          mv win-ARM/cimgui.dll cimgui/win-arm/cimgui.dll
          mv win-ARM/cimplot.dll cimplot/win-arm/cimplot.dll

          mkdir -p cimgui/osx cimplot/osx
          mv macos-latest-x64/cimgui.dylib cimgui/osx/cimgui.dylib
          mv macos-latest-x64/cimplot.dylib cimplot/osx/cimplot.dylib

          mkdir -p cimgui/linux-x64 cimplot/linux-x64
          mv ubuntu-latest-x64/cimgui.so cimgui/linux-x64/cimgui.so
          mv ubuntu-latest-x64/cimplot.so cimplot/linux-x64/cimplot.so

          mv JsonFiles/cimgui/*.json cimgui/
          mv JsonFiles/cimplot/*.json cimplot/

      - name: Gzip artifacts
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          tar -czvf cimgui-${TAG_NAME}.tar.gz cimgui/
          tar -czvf cimplot-${TAG_NAME}.tar.gz cimplot/

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            cimgui-${{ env.TAG_NAME }}.tar.gz
            cimplot-${{ env.TAG_NAME }}.tar.gz
